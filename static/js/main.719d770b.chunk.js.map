{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","components/header/header.component.jsx","components/button/button.component.jsx","App.util.js","network/network.js","components/errorBoundary/errorBoundary.component.jsx","App.js","redux/anime/anime-actions.js","redux/anime/anime-reducer.js","redux/root-reducer.js","redux/store.js","serviceWorker.js","index.js"],"names":["Card","props","className","src","anime","image_url","alt","title","CardList","animeList","map","key","mal_id","SearchBox","placeholder","handleChange","handleSubmit","type","onChange","onKeyDown","Header","children","Button","onClick","handleClick","disabled","disable","text","scrollToTop","window","scrollTo","top","behavior","baseUrl","query","fetch","searchValue","limit","ErrorBoundary","state","error","errorInfo","this","setState","style","whiteSpace","toString","componentStack","Component","App","checkData","data","length","handleApiCall","setAnimeList","loading","noSpaceSearchValue","replace","network","then","response","json","results","catch","console","log","e","searchField","target","value","handleLoadMore","prevState","fill","height","width","left","right","margin","defaultProps","connect","animes","dispatch","payload","INITIAL_STATE","animeReducer","action","combineReducers","middlewares","logger","store","createStore","rootReducer","applyMiddleware","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.719d770b.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './card.styles.css';\r\n\r\nexport const Card = (props) => {\r\n    return (\r\n        <div className=\"card-container\">\r\n            <img className=\"card-img\" src={props.anime.image_url} alt=\"anime-poster\"/>\r\n         <span className=\"card-title\">{props.anime.title}</span>    \r\n        </div>\r\n    )\r\n}\r\n\r\nCard.propTypes = {\r\n    anime: PropTypes.object,\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './card-list.styles.css';\r\nimport {Card} from '../card/card.component'\r\n\r\nexport const CardList = (props) => {\r\n    return (\r\n        <div className='card-list'>{\r\n            props.animeList.map(anime => {\r\n                return (\r\n                    <Card key={anime.mal_id} anime={anime}/>\r\n                )\r\n            })\r\n        }</div>\r\n    )\r\n}\r\n\r\nCardList.propTypes = {\r\n    animeList: PropTypes.array,\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({placeholder, handleChange, handleSubmit}) => {\r\n    return (\r\n        <input \r\n        className=\"search\"\r\n        type=\"search\" \r\n        placeholder={placeholder}\r\n        onChange={handleChange}\r\n        onKeyDown={handleSubmit}/>\r\n    )\r\n}\r\n\r\nSearchBox.propTypes = {\r\n    placeholder: PropTypes.string,\r\n    handleChange: PropTypes.func,\r\n    handleSubmit: PropTypes.func,\r\n}","import React from 'react';\r\nimport './header.styles.css';\r\n\r\nexport const Header = (props) => {\r\n    return (\r\n        <div className='header-container'>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './button.styles.css';\r\n\r\nexport const Button = (props) => {\r\n    return (\r\n        <button\r\n            className='button-container'\r\n            onClick={props.handleClick}\r\n            disabled={props.disable}\r\n        >\r\n            {props.text}\r\n        </button>\r\n    )\r\n}\r\n\r\nButton.propTypes = {\r\n    text: PropTypes.string,\r\n    disable: PropTypes.bool,\r\n    handleClick: PropTypes.func,\r\n}","\r\n  export const scrollToTop =()=>{\r\n    window.scrollTo({\r\n      top: 0,\r\n      behavior: \"smooth\"\r\n    });\r\n  }\r\n","const baseUrl = `https://api.jikan.moe/v3/`\r\n\r\nconst getSearchResult = (query) => fetch(`${baseUrl}search/anime?q=${query.searchValue}&limit=${query.limit}`);\r\nconst getTopResult = () => fetch(`${baseUrl}top/anime`);\r\n\r\nexport default {\r\n    getSearchResult,getTopResult\r\n}","import React, { Component } from 'react';\r\n\r\nexport class ErrorBoundary extends Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = { error: null, errorInfo: null };\r\n    }\r\n    \r\n    componentDidCatch(error, errorInfo) {\r\n      // Catch errors in any components below and re-render with error message\r\n      this.setState({\r\n        error: error,\r\n        errorInfo: errorInfo\r\n      })\r\n      // You can also log error messages to an error reporting service here\r\n    }\r\n    \r\n    render() {\r\n      if (this.state.errorInfo) {\r\n        // Error path\r\n        return (\r\n          <div>\r\n            <h2>Something went wrong.</h2>\r\n            <details style={{ whiteSpace: 'pre-wrap' }}>\r\n              {this.state.error && this.state.error.toString()}\r\n              <br />\r\n              {this.state.errorInfo.componentStack}\r\n            </details>\r\n          </div>\r\n        );\r\n      }\r\n      // Normally, just render children\r\n      return this.props.children;\r\n    }  \r\n  }\r\n  ","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\nimport { Header } from './components/header/header.component';\nimport { Button } from './components/button/button.component';\nimport { setAnimeList } from './redux/anime/anime-actions';\nimport { scrollToTop } from './App.util';\nimport network from './network/network';\nimport ReactLoading from 'react-loading';\nimport { ErrorBoundary } from './components/errorBoundary/errorBoundary.component'\nimport PropTypes from 'prop-types';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      searchField: \"\",\n      limit: 10,\n      disable: false,\n      loading: false,\n    }\n  }\n\n  componentDidMount() {\n    this.handleApiCall()\n  }\n\n  /**\n   * @desc Check the if the all titles are loaded\n   * @param {*} data \n   */\n\n  checkData = (data) => {\n    const { animeList } = this.props\n    if (animeList.length === data.length) {\n      this.setState({\n        disable: true\n      })\n    } else {\n      this.setState({\n        disable: false\n      })\n    }\n  }\n\n  /**\n   * @desc Handle the API calls on the basis of type user action\n   * @param {*} searchValue \n   * @param {*} limit \n   */\n  handleApiCall = (searchValue, limit) => {\n    const { setAnimeList } = this.props\n    this.setState({\n      loading: true\n    })\n    if (searchValue) {\n      const noSpaceSearchValue = searchValue.replace(/\\s/g, \"\")\n      network.getSearchResult({ searchValue: noSpaceSearchValue, limit })\n        .then(response => response.json())\n        .then(data => {\n          this.setState({\n            loading: false\n          })\n          if (data.results) {\n            this.checkData(data.results)\n            setAnimeList(data.results)\n          }\n        })\n        .catch(error => {\n          this.setState({\n            loading: false\n          })\n          console.log(\"Error : \", error)\n        })\n    } else {\n      network.getTopResult()\n        .then(response => response.json())\n        .then(data => {\n          this.setState({\n            loading: false\n          })\n          if (data.top) {\n            this.checkData(data.top)\n            setAnimeList(data.top)\n          }\n        })\n        .catch(error => {\n          this.setState({\n            loading: false\n          })\n          console.log(\"Error : \", error)\n        })\n    }\n  }\n\n\n/**\n * @desc Change the search value  \n * @param {*} e \n */\n  handleChange = (e) => {\n    this.setState({\n      searchField: e.target.value,\n      limit: 10,\n      disable: false\n    }, () => {\n      if (!this.state.searchField) {\n        this.handleApiCall()\n        scrollToTop()\n      }\n    })\n  }\n\n  /**\n   * @desc action handler when user hit enter on the search field\n   * @param {*} e \n   */\n  handleSubmit = (e) => {\n    if (e.key === 'Enter') {\n      this.handleApiCall(this.state.searchField, this.state.limit)\n      scrollToTop()\n    }\n  }\n\n  /**\n   * @desc action handler when user click on Load More button\n   * @param {*} e \n   */\n  handleLoadMore = (e) => {\n    this.setState(prevState => {\n      return { limit: prevState.limit + 10 }\n    }, () => {\n      if (this.state.limit > 10) {\n        this.handleApiCall(this.state.searchField, this.state.limit)\n      }\n    })\n  }\n  render() {\n    const { animeList } = this.props\n    const { disable, loading } = this.state\n    return (\n      <div className=\"App\">\n        <Header>\n          <h1 className='title'>Anime World</h1>\n          <SearchBox\n            placeholder=\"Search Anime\"\n            handleChange={this.handleChange}\n            handleSubmit={this.handleSubmit}\n          />\n          {loading &&\n            <ReactLoading\n              type='spinningBubbles'\n              style={{\n                fill: 'rgb(12, 139, 202)',\n                height: 64,\n                width: 64,\n                left: 0,\n                right: 0,\n                margin: 'auto',\n              }}\n            />\n          }\n        </Header>\n        <ErrorBoundary>\n          <CardList animeList={animeList} />\n          <Button\n            text=\"Load More\"\n            handleClick={this.handleLoadMore}\n            disable={disable}\n          />\n        </ErrorBoundary>    \n      </div>\n    );\n  }\n\n}\n\n\nApp.propTypes = {\n  animeList: PropTypes.array,\n  setAnimeList: PropTypes.func,\n}\n\nApp.defaultProps = {\n  animeList: [],\n}\n\nconst mapStateToProps = state => ({\n  animeList: state.animes.animeList\n});\n\nconst mapDispatchToProps = dispatch => ({\n  setAnimeList: animes => dispatch(setAnimeList(animes))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","export const setAnimeList = animes => ({\r\n    type: 'SET_ANIME_LIST',\r\n    payload: animes\r\n})\r\n\r\nexport const appendAnimeList = animes => ({\r\n    type: 'APPEND_ANIME_LIST',\r\n    payload: animes\r\n})","const INITIAL_STATE = {\r\n    animeList : []\r\n}\r\n\r\nconst animeReducer = (state = INITIAL_STATE, action) => {\r\n    switch(action.type) {\r\n        case 'SET_ANIME_LIST':\r\n            return {\r\n                ...state,\r\n                animeList:action.payload\r\n            }\r\n        case 'APPEND_ANIME_LIST':\r\n            return {\r\n                ...state,\r\n                animeList:action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default animeReducer;","import { combineReducers } from 'redux'\r\nimport animeReducer from './anime/anime-reducer'\r\n\r\nexport default combineReducers({\r\n    animes : animeReducer\r\n})","import { createStore, applyMiddleware } from 'redux';\r\nimport logger from 'redux-logger';\r\n\r\nimport rootReducer from './root-reducer';\r\n\r\nconst middlewares = [logger];\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(...middlewares));\r\n\r\nexport default store;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './redux/store'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}